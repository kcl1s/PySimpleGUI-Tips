import PySimpleGUI as sg
from datetime import datetime

cal_image2=b'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'
cal_image1=b'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'

# https://www.pysimplegui.org/en/latest/call%20reference/#pre-defined-buttons-use-in-your-layout
# https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior

sg.theme('LightBrown2')
layout = [[sg.T('Departure Date'),sg.Input(key='Ddate', size=(20,1),readonly=True), 
                sg.CalendarButton('Calendar',location= (200,200),format = "%B %d, %Y")],
          [sg.T('     Arrival Date'),sg.Input(key='Adate', size=(20,1),readonly=True), 
                sg.CalendarButton('',image_data=cal_image2,image_subsample=10,
                 location= (200,200),format = "%B %d, %Y")],         
          [sg.Button('Calculate Difference'), sg.Exit()],
          [sg.Text(size=(20,1), font=('Helvetica', 20), justification='center', key='dateDiff')]]

window = sg.Window('Calendar', layout)

while True:
    event, values = window.read()
    if event in (sg.WIN_CLOSED, 'Exit'):
        break
    elif event == 'Calculate Difference':
        diff = datetime.strptime(values['Adate'], "%B %d, %Y") - datetime.strptime(values['Ddate'], "%B %d, %Y")
        window['dateDiff'].update(str(diff.days)+' Days Between Dates')
window.close()

